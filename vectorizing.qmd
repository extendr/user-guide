---
title: Creating vectorized functions
subtitle: "making a heckin' case converter"
---

```{r, include = FALSE}
library(rextendr)

```



```rust
use heck::ToSnekCase;

#[extendr]
fn to_lower_snek_case(x: Strings) -> Strings {
    x.into_iter()
        .map(|xi| match xi.is_na() {
            true => Rstr::na(),
            false => Rstr::from(xi.as_str().to_snek_case()),
        })
        .collect::<Strings>()
}
```

```{r, include = FALSE}
rextendr::rust_source(code = r"(
use heck::ToSnekCase;

#[extendr]
fn to_snek_case(x: Strings) -> Strings {
    x.into_iter()
        .map(|xi| match xi.is_na() {
            true => Rstr::na(),
            false => Rstr::from(xi.as_str().to_snek_case()),
        })
        .collect::<Strings>()
}
)", dependencies = list("heck" = "*"), profile = "release")
```

Bench mark with the standard snakecase

```{r, warning = FALSE}
x <- unlist(lorem::ipsum(5000, 1, 7))

head(x)

bench::mark(
  rust = to_snek_case(x),
  snakecase = snakecase::to_snake_case(x)
)
```

We can make a macro to simplify this.

The whole thing:

```rust
use extendr_api::prelude::*; 

#[allow(unused_imports)]
use heck::{
    ToKebabCase, ToPascalCase, 
  	ToShoutyKebabCase, ToShoutySnekCase, 
  	ToSnekCase, ToTitleCase,
    ToTrainCase, ToUpperCamelCase,
};

macro_rules! make_heckin_fn {
    ($fn_name:ident) => {
        #[extendr]
        fn $fn_name(x: Strings) -> Strings {
            x.into_iter()
                .map(|xi| match xi.is_na() {
                    true => Rstr::na(),
                    false => Rstr::from(xi.as_str().to_snek_case()),
                })
                .collect::<Strings>()
        }
    };
}

make_heckin_fn!(to_kebab_case);
make_heckin_fn!(to_shouty_kebab_case);
make_heckin_fn!(to_snek_case);
make_heckin_fn!(to_shouty_snek_case);
make_heckin_fn!(to_pascal_case);
make_heckin_fn!(to_upper_camel_case);
make_heckin_fn!(to_train_case);
make_heckin_fn!(to_title_case);

extendr_module! {
    mod heckin;
    fn hello_world;
    fn parse_post;
    fn to_snek_case;
    fn to_shouty_snek_case;
    fn to_kebab_case;
    fn to_shouty_kebab_case;
    fn to_pascal_case;
    fn to_upper_camel_case;
    fn to_title_case;
    fn to_train_case;
}
```