{
  "hash": "4b17b7e262d8f87d5e8efcf567badc49",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Making Rust items available to R\"\n---\n\n\nThe power of extendr is in its ability to use utilize the power of Rust from R. The `#[extendr]` macro is what determines what is exported to R from Rust. This section covers the basic usage of the `#[extendr]` macro. \n\n[`#[extendr]`](https://extendr.github.io/extendr/extendr_api/attr.extendr.html) is what is referred to as an [attribute macro](https://doc.rust-lang.org/reference/procedural-macros.html#attribute-macros) (which itself is a type of [procedural macro](https://doc.rust-lang.org/reference/procedural-macros.html)). An attribute macro is attached to an [item](https://doc.rust-lang.org/reference/items.html) such as a function, `struct`, `enum`, or `impl`. \n\nThe `#[extendr]` attribute macro indicates that an item should be made available to R. It _can only be used_ with a function or an impl block. \n\n\n\n\n\n## Exporting functions \n\n```rust\n\n```\n\n## `ToVectorValue` trait\n\n## Exporting `impl` blocks\n\nThe other supported item that can be made available to R is an [`impl`](https://doc.rust-lang.org/std/keyword.impl.html) block. \n`impl` is a keyword that allows you to _implement_ a trait or an inherent implementation. The `#[extendr]` macro works with inherent implementations. These are `impl`s on a type such as an `enum` or a `struct`. \n\n::: callout-note\nYou can only add an inherent implementation on a type that you have own and not provided by a third party crate. This would violate the [orphan rules](https://github.com/Ixrec/rust-orphan-rules?tab=readme-ov-file#what-are-the-orphan-rules).\n:::\n\n\nSay you have an enum that specifies a type of shape. This enum alone cannot be returned to R. For example, the following code will result in a compilation error\n\n```rust\n#[derive(Debug)]\nenum Shape {\n    Triangle,\n    Rectangle,\n    Pentagon,\n    Hexagon,\n}\n\n#[extendr]\nfn make_shape(shape: &str) -> Shape {\n    match shape {\n        \"triangle\" => Shape::Triangle,\n        \"rectangle\" => Shape::Rectangle,\n        \"pentagon\" => Shape::Pentagon,\n        \"hexagon\" => Shape::Hexagon,\n        &_ => unimplemented!()\n    }\n}\n```\n```\nerror[E0277]: the trait bound `Shape: ToVectorValue` is not satisfied\n  --> src/lib.rs:19:1\n   |\n19 | #[extendr]\n   | ^^^^^^^^^^ the trait `ToVectorValue` is not implemented for `Shape`, which is required by `extendr_api::Robj: From<Shape>`\n   |\n```\nHowever, if an impl block is added to the `Shape` enum, it\n\n::: {.cell}\n\n```{.rust .cell-code}\n#[derive(Debug)]\nenum Shape {\n    Triangle,\n    Rectangle,\n    Pentagon,\n    Hexagon,\n}\n\n#[extendr]\nimpl Shape {\n    fn new(x: &str) -> Self {\n        match x {\n            \"triangle\" => Self::Triangle,\n            \"rectangle\" => Self::Rectangle,\n            \"pentagon\" => Self::Pentagon,\n            \"hexagon\" => Self::Hexagon,\n            &_ => unimplemented!(),\n        }\n    }\n\n    fn n_coords(&self) -> usize {\n        match &self {\n            Shape::Triangle => 3,\n            Shape::Rectangle => 4,\n            Shape::Pentagon => 4,\n            Shape::Hexagon => 5,\n        }\n    }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntri <- Shape$new(\"triangle\")\ntri\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<pointer: 0x136ea8270>\nattr(,\"class\")\n[1] \"Shape\"\n```\n\n\n:::\n:::\n\n\n## `impl` ownership\n\nAdding the `#[extendr]` macro to an impl allows the struct or enum to be made available to R as an external pointer. Once you create an external pointer, that is then owned by R. So you can only get references to it or mutable references. If you need an owned version of the type, then you will need to clone.\n\n## `ExternalPtr`: returning arbitrary Rust types \n\nIn the event that you need to return a Rust type to R that doesnt have a compatible impl or is a type that you don't own, you can use `ExternalPtr<T>`.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}